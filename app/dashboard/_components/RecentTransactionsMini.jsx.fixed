"use client";

import React, { useMemo } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { motion } from "framer-motion";
import {
  UtensilsCrossed,
  ShoppingBag,
  Home,
  Car,
  Film,
  Plane,
  Heart,
  BookOpen,
  Phone,
  Scissors,
  BarChart3,
  Wallet,
  FileText,
  Package2,
  ArrowDownRight,
  ArrowUpRight,
} from "lucide-react";

// Format currency values consistently
const formatCurrency = (value) => {
  // Round the value to nearest integer
  const roundedValue = Math.round(value);
  if (roundedValue >= 1000000)
    return `₹${(roundedValue / 1000000).toFixed(1)}M`;
  if (roundedValue >= 1000) return `₹${(roundedValue / 1000).toFixed(1)}K`;
  return `₹${roundedValue}`;
};

// Category icons mapping
const CATEGORY_ICONS = {
  "Food & Dining": UtensilsCrossed,
  Shopping: ShoppingBag,
  Housing: Home,
  Transportation: Car,
  Entertainment: Film,
  Travel: Plane,
  "Health & Fitness": Heart,
  Education: BookOpen,
  "Bills & Utilities": Phone,
  "Personal Care": Scissors,
  Investments: BarChart3,
  Income: Wallet,
  Uncategorized: FileText,
  Others: Package2,
};

function RecentTransactionsMini({ transactions = [] }) {
  // State to track which transaction has tooltip visible
  const [activeTooltipIndex, setActiveTooltipIndex] = React.useState(null);

  // Function to handle mouse leave
  const handleMouseLeave = () => {
    setActiveTooltipIndex(null);
  };

  // Function to handle mouse enter
  const handleMouseEnter = (index) => {
    setActiveTooltipIndex(index);
  };

  // Format transaction time (for tooltip or expanded view)
  const formatTransactionTime = (dateString) => {
    const date = new Date(dateString);
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const ampm = hours >= 12 ? "pm" : "am";
    const formattedHours = hours % 12 || 12; // Convert 0 to 12 for 12 AM
    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;

    return `${formattedHours}:${formattedMinutes} ${ampm}`;
  };

  // Format date nicely
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);

    // Check if date is today
    if (date.toDateString() === now.toDateString()) {
      return "Today";
    }

    // Check if date is yesterday
    if (date.toDateString() === yesterday.toDateString()) {
      return "Yesterday";
    }

    // Otherwise return formatted date
    return date.toLocaleDateString(undefined, {
      month: "short",
      day: "numeric",
    });
  };

  // Process and sort transactions
  const recentTransactions = useMemo(() => {
    if (!Array.isArray(transactions) || transactions.length === 0) {
      return [];
    }

    return [...transactions]
      .filter((tx) => tx.date && tx.amount && !isNaN(new Date(tx.date)))
      .sort((a, b) => new Date(b.date) - new Date(a.date))
      .slice(0, 7) // Show only the 7 most recent transactions
      .map((tx) => {
        // Parse transactionType correctly, ensuring proper credit/debit identification
        let isCredit = false;

        // Check transaction type first (most reliable)
        if (tx.transactionType) {
          isCredit = tx.transactionType.toUpperCase() === "CREDIT";
        }
        // If no transaction type, use amount sign as fallback
        else {
          isCredit = parseFloat(tx.amount) > 0;
        }

        return {
          ...tx,
          isCredit,
          formattedTime: formatTransactionTime(tx.date),
        };
      });
  }, [transactions]);

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        delayChildren: 0.1,
        staggerChildren: 0.05,
      },
    },
  };
  const itemVariants = {
    hidden: { y: 10, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: { duration: 0.3 },
    },
  };

  return (
    <motion.div
      className="w-full h-full"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <Card className="w-full h-full">
        <CardHeader className="pb-2">
          <CardTitle className="text-xl font-bold text-gray-800">
            Recent Transactions
          </CardTitle>
          <CardDescription className="text-sm text-gray-500">
            Your latest financial activity
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-2 h-[calc(100%-80px)]">
          {recentTransactions.length === 0 ? (
            <div className="h-full flex flex-col items-center justify-center">
              <div className="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mb-4">
                <Wallet size={24} className="text-gray-400" />
              </div>
              <p className="text-gray-500 mb-2">No recent transactions</p>
              <p className="text-xs text-gray-400 text-center max-w-[200px]">
                Start adding transactions to track your financial activity
              </p>
            </div>
          ) : (
            <div
              className="h-full overflow-y-auto pr-2 relative" 
              style={{ position: "relative", zIndex: 0 }}
            >
              {/* Fade shadow at the bottom to indicate scroll */}
              <div className="absolute bottom-0 left-0 right-0 h-10 bg-gradient-to-t from-white to-transparent pointer-events-none z-10"></div>
              <div className="space-y-3 pb-10">
                {recentTransactions.map((tx, index) => (
                  <motion.div
                    key={index}
                    className="flex items-center justify-between p-3 rounded-lg border border-gray-100 bg-white hover:bg-gray-50 cursor-pointer transition-colors relative"
                    variants={itemVariants}
                    onMouseEnter={() => handleMouseEnter(index)}
                    onMouseLeave={handleMouseLeave}
                  >
                    {/* Transaction details tooltip on hover - absolute position */}
                    {activeTooltipIndex === index && (
                      <div
                        className="absolute bg-white p-3 rounded-lg shadow-lg border border-gray-200 z-[100]"
                        style={{
                          width: "260px",
                          top: "0",
                          right: "-8px",
                          transform: "translateX(100%)",
                          maxHeight: "90vh",
                          overflowY: "auto"
                        }}
                      >
                        {/* Pointer triangle */}
                        <div className="absolute w-4 h-4 bg-white border-l border-t border-gray-200 transform -rotate-45 -left-2 top-6"></div>
                        
                        <div className="relative z-10">
                          <div className="text-sm font-medium text-gray-800 mb-1">
                            {new Date(tx.date).toLocaleDateString(undefined, {
                              year: "numeric",
                              month: "long",
                              day: "numeric",
                            })}
                          </div>
                          <div className="text-sm text-gray-700 mb-2">
                            {tx.formattedTime}
                          </div>
                          <div className="flex items-center mb-2">
                            <div className="w-6 h-6 rounded-full flex items-center justify-center bg-gray-100 mr-2">
                              {React.createElement(
                                CATEGORY_ICONS[tx.category] || FileText,
                                { size: 14 }
                              )}
                            </div>
                            <span className="text-sm font-medium">
                              {tx.category || "Uncategorized"}
                            </span>
                          </div>
                          <div className="flex justify-between items-center mb-1">
                            <span className="text-xs text-gray-500">Type</span>
                            <span
                              className={`text-xs font-medium ${
                                tx.isCredit ? "text-green-600" : "text-red-600"
                              }`}
                            >
                              {tx.isCredit ? "CREDIT" : "DEBIT"}
                            </span>
                          </div>
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-xs text-gray-500">Amount</span>
                            <span
                              className={`text-sm font-medium ${
                                tx.isCredit ? "text-green-600" : "text-red-600"
                              }`}
                            >
                              {tx.isCredit ? "+" : "-"}₹
                              {Math.abs(parseFloat(tx.amount)).toLocaleString(
                                "en-IN",
                                {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2,
                                }
                              )}
                            </span>
                          </div>
                          {tx.description && (
                            <div className="border-t border-gray-100 pt-2 mt-1">
                              <span className="text-xs text-gray-500">
                                Description
                              </span>
                              <p className="text-sm text-gray-800 mt-1">
                                {tx.description}
                              </p>
                            </div>
                          )}
                          {tx.transactionId && (
                            <div className="text-xs text-gray-500 mt-2 border-t border-gray-100 pt-2">
                              <span className="text-gray-400">
                                Transaction ID:
                              </span>
                              <div className="font-mono bg-gray-50 p-1 rounded mt-1 text-[10px] break-all">
                                {tx.transactionId}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                    <div className="flex items-center gap-3">
                      <div className="relative">
                        <div className="w-10 h-10 rounded-full flex items-center justify-center bg-gray-100">
                          {React.createElement(
                            CATEGORY_ICONS[tx.category] || FileText,
                            {
                              size: 18,
                              className: "text-gray-700",
                            }
                          )}
                        </div>
                        <div
                          className={`w-5 h-5 rounded-full flex items-center justify-center absolute -bottom-1 -right-1 shadow-sm ${
                            tx.isCredit
                              ? "bg-green-100 text-green-600"
                              : "bg-red-100 text-red-600"
                          }`}
                        >
                          {tx.isCredit ? (
                            <ArrowUpRight size={12} />
                          ) : (
                            <ArrowDownRight size={12} />
                          )}
                        </div>
                      </div>
                      <div className="flex flex-col">
                        <span className="font-medium text-gray-800 max-w-[160px] truncate">
                          {tx.description || "Unknown merchant"}
                        </span>
                        <div className="flex items-center gap-1 text-xs">
                          <span className="text-gray-500">
                            {formatDate(tx.date)}
                          </span>
                          <span className="text-gray-400">•</span>
                          <span className="text-gray-500">
                            {tx.formattedTime}
                          </span>
                          <span className="text-gray-400">•</span>
                          <span className="text-gray-500">
                            {tx.category || "Uncategorized"}
                          </span>
                        </div>
                        {tx.transactionId && (
                          <span className="text-xs text-gray-400 hidden group-hover:block mt-0.5">
                            ID: {tx.transactionId.substring(0, 10)}...
                          </span>
                        )}
                      </div>
                    </div>
                    <span
                      className={`font-semibold ${
                        tx.isCredit ? "text-green-600" : "text-red-600"
                      } whitespace-nowrap`}
                    >
                      {tx.isCredit ? "+" : "-"}
                      {formatCurrency(Math.abs(parseFloat(tx.amount)))}
                    </span>
                  </motion.div>
                ))}
              </div>
              <div className="mt-4 pt-2 text-center">
                <button className="px-4 py-2 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors flex items-center justify-center mx-auto">
                  View All Transactions
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-4 w-4 ml-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}

export default RecentTransactionsMini;
